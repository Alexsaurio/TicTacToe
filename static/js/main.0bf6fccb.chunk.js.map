{"version":3,"sources":["components/square/Square.jsx","components/board/Board.jsx","components/game/Game.jsx","serviceWorker.js","index.js"],"names":["Square","value","click","className","onClick","Board","squares","createRow","i","row","j","push","key","board","generatorBoard","Game","useState","Array","fill","setSquares","stepNumber","setStepNumber","history","setHistory","isNext","setIsNext","status","setStatus","consultWinner","lines","length","a","b","c","useEffect","current","console","log","winner","moves","map","step","move","desc","slice","jumpTo","e","newHistory","newSq","concat","handleClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0bf6fccb.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Square.css';\r\n\r\nconst Square = ({value, click}) => {\r\n    return <button className={value === 'X' ? \"square x\" : \"square o\"} onClick={() => click() }>\r\n        {value}\r\n    </button>\r\n}\r\n\r\nexport default Square;\r\n","import React, { useState } from 'react';\r\nimport Square from '../square/Square';\r\nimport './Board.css';\r\n\r\nconst Board = ({squares, click}) => {\r\n\r\n    function generatorBoard() {\r\n        let board = []\r\n        for (let i = 0; i < 9; i += 3) {\r\n            board.push(<div key={i} className=\"board-row\">{createRow(i)}</div>)\r\n        }\r\n        return board;\r\n    }\r\n\r\n    function createRow(i) {\r\n        let row = []\r\n        for (let j = i; j < i + 3; j++) {\r\n            row.push(<Square key={j} value={squares[j]} click={() => click(j)} />);\r\n        }\r\n        return row;\r\n    }\r\n    return <>\r\n        <div className=\"board\"> {generatorBoard()} </div>\r\n    </>\r\n}\r\n\r\nexport default Board;\r\n","import React, { useState, useEffect } from 'react';\r\nimport Board from '../board/Board';\r\nimport './Game.css';\r\n\r\nconst Game = () => {\r\n\r\n    const [squares, setSquares] = useState(Array(9).fill(null));\r\n    const [stepNumber, setStepNumber] = useState(0);\r\n    const [history, setHistory] = useState([{ squares: squares }]);\r\n    const [isNext, setIsNext] = useState(true);\r\n    const [status, setStatus] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        const current = history[stepNumber];\r\n        console.log(consultWinner(current))\r\n        const winner = consultWinner(current.squares)\r\n\r\n        if (winner) {\r\n            setStatus('Ganador: ' + winner);\r\n        } else {\r\n            setStatus('Jugador activo: ' + (isNext ? 'X' : 'O'));\r\n        }\r\n    })\r\n\r\n    function handleClick(i) {\r\n\r\n        const newHistory = history.slice(0, stepNumber + 1);\r\n        const current = newHistory[newHistory.length - 1];\r\n        const newSq = [...current.squares];\r\n\r\n        if (consultWinner(newSq) || newSq[i]) {\r\n            return;\r\n        }\r\n        console.log(\"mi tiro \", i);\r\n        newSq[i] = isNext ? 'X' : 'O';\r\n        setHistory(newHistory.concat([{\r\n            squares: newSq,\r\n        }]));\r\n        setSquares(newSq);\r\n        setStepNumber(newHistory.length);\r\n        setIsNext(!isNext);\r\n    }\r\n\r\n    function jumpTo(step) {\r\n        setStepNumber(step);\r\n        setIsNext((step % 2) === 0);\r\n        setHistory(history.slice(0, step + 1));\r\n        setSquares(history[step].squares);\r\n    }\r\n\r\n    function consultWinner(squares) {\r\n\r\n        const lines = [\r\n            [0, 1, 2],\r\n            [3, 4, 5],\r\n            [6, 7, 8],\r\n            [0, 3, 6],\r\n            [1, 4, 7],\r\n            [2, 5, 8],\r\n            [0, 4, 8],\r\n            [2, 4, 6],\r\n        ];\r\n\r\n        for (let i = 0; i < lines.length; i++) {\r\n            const [a, b, c] = lines[i];\r\n\r\n            if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n                // console.log(\"ya gano alguien\", squares[a])\r\n                return squares[a];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    const moves = history.map((step, move) => {\r\n        const desc = move ?\r\n            'Ir moviento #' + move :\r\n            'Comienzo del juego';\r\n        return (\r\n            <li key={move}>\r\n                <button onClick={() => jumpTo(move)}>{desc}</button>\r\n            </li>\r\n        );\r\n    })\r\n\r\n    return <>\r\n        <h1 className=\"game-title\">Juego Tic Tac Toe</h1>\r\n        <div className=\"game-status\"> {status} </div>\r\n        <div className=\"game-board\">\r\n            <Board squares={squares} click={(e) => handleClick(e)} />\r\n            <div className=\"game-moves\">\r\n                <ul>{moves}</ul>\r\n            </div>\r\n        </div>\r\n    </>\r\n}\r\nexport default Game;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport Game from './components/game/Game';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Game />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}